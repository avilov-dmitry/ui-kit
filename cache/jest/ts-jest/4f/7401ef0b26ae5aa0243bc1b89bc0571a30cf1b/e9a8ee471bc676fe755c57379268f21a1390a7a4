[["/Users/dmitry.avilov/a/my/components/src/components/Checkbox/__test__/Checkbox.test.tsx",{"fileContent":"import React from 'react';\nimport { shallow } from 'enzyme';\nimport { Checkbox } from '../Checkbox';\n\nconst getComponent = (props: any) => shallow(<Checkbox {...props} />);\n\ndescribe('Badge component', () => {\n    it('should display count', () => {\n        const components = getComponent({ id: 'TEST_ID', classNames: 'TEST_CLASS_NAME' });\n        expect(components.hasClass('TEST_CLASS_NAME')).toBe(true);\n    });\n});\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/Checkbox/Checkbox.tsx","/Users/dmitry.avilov/a/my/components/src/components/index.ts"]}],["/Users/dmitry.avilov/a/my/components/src/components/Checkbox/Checkbox.tsx",{"fileContent":"import React, { useCallback, useRef } from 'react';\nimport classnames from 'classnames/bind';\nimport { Icon } from 'components';\nimport styles from './Checkbox.modules.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Checkbox';\n\nexport type CheckboxClickParamsType = { id: string; value: boolean };\n\nexport type CheckboxPropsType = {\n    className?: string;\n    id: string;\n    isDisabled?: boolean;\n    isLeftLabel?: boolean;\n    isSquare?: boolean;\n    label?: string;\n    name?: string;\n    onClick?: (params: CheckboxClickParamsType) => void;\n    value: boolean;\n};\n\nexport const Checkbox: React.FC<CheckboxPropsType> = ({\n    className,\n    id,\n    isDisabled = false,\n    isLeftLabel = false,\n    isSquare = false,\n    label,\n    name,\n    onClick,\n    value,\n}) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const handleChange = useCallback(\n        (event: any) => {\n            if (!isDisabled && onClick) {\n                onClick({ id, value: event.target.checked as boolean });\n            }\n        },\n        [id, isDisabled, onClick]\n    );\n\n    const handleClick = useCallback(() => {\n        const input = inputRef.current;\n\n        if (input && !input.disabled) {\n            input.click();\n        }\n    }, []);\n\n    return (\n        <div className={cn(CLASS_NAME, { [`${CLASS_NAME}--isLeftLabel`]: isLeftLabel }, className)}>\n            <input\n                id={id}\n                ref={inputRef}\n                name={name}\n                type=\"checkbox\"\n                checked={value}\n                className={cn(`${CLASS_NAME}__input`)}\n                onClick={handleChange}\n                disabled={isDisabled}\n            />\n            <button\n                className={cn(`${CLASS_NAME}__icon-wrapper`, {\n                    [`${CLASS_NAME}__icon-wrapper--isChecked`]: value,\n                    [`${CLASS_NAME}__icon-wrapper--isDisabled`]: isDisabled,\n                    [`${CLASS_NAME}__icon-wrapper--isSquare`]: isSquare,\n                })}\n                onClick={handleClick}\n            >\n                {value && <Icon name=\"ok-outlined\" className={cn(`${CLASS_NAME}__icon`)} />}\n            </button>\n            {label && (\n                <label\n                    htmlFor={id}\n                    className={cn(`${CLASS_NAME}__label`, {\n                        [`${CLASS_NAME}__label--isLeftLabel`]: isLeftLabel,\n                    })}\n                >\n                    {label}\n                </label>\n            )}\n        </div>\n    );\n};\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/components/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/components/src/components/MediaPlayer/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/components/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/components/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Toggle/index.ts"]}],["/Users/dmitry.avilov/a/my/components/src/components/index.ts",{"fileContent":"export * from './Button';\nexport * from './Checkbox';\nexport * from './CheckboxList';\nexport * from './Icon';\nexport * from './MediaPlayer';\nexport * from './Modal';\nexport * from './Notifications';\nexport * from './Overlay';\nexport * from './Portal';\nexport * from './Preloader';\nexport * from './ResizeElement';\nexport * from './ThumbSlider';\nexport * from './Toggle';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/components/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/components/src/components/MediaPlayer/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/components/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/components/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Toggle/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Button/Button.tsx","/Users/dmitry.avilov/a/my/components/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Checkbox/Checkbox.tsx","/Users/dmitry.avilov/a/my/components/src/components/CheckboxList/CheckboxList.tsx","/Users/dmitry.avilov/a/my/components/src/components/Icon/Icon.tsx","/Users/dmitry.avilov/a/my/components/src/components/MediaPlayer/_types.ts","/Users/dmitry.avilov/a/my/components/src/components/MediaPlayer/_utils.ts","/Users/dmitry.avilov/a/my/components/src/components/MediaPlayer/MediaPlayer.tsx","/Users/dmitry.avilov/a/my/components/src/components/Modal/Modal.tsx","/Users/dmitry.avilov/a/my/components/src/components/Notifications/Notifications.tsx","/Users/dmitry.avilov/a/my/components/src/components/Overlay/Overlay.tsx","/Users/dmitry.avilov/a/my/components/src/components/Portal/Portal.tsx","/Users/dmitry.avilov/a/my/components/src/components/Preloader/Preloader.tsx","/Users/dmitry.avilov/a/my/components/src/components/ResizeElement/_types.ts","/Users/dmitry.avilov/a/my/components/src/components/ResizeElement/ResizeElement.tsx","/Users/dmitry.avilov/a/my/components/src/components/ThumbSlider/ThumbSlider.tsx","/Users/dmitry.avilov/a/my/components/src/components/Toggle/Toggle.tsx","/Users/dmitry.avilov/a/my/components/src/components/Toggle/_types/index.ts"]}],["/Users/dmitry.avilov/a/my/components/src/components/Button/index.ts",{"fileContent":"export * from './Button';\nexport * from './_types';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/Button/Button.tsx","/Users/dmitry.avilov/a/my/components/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Button/_types/props-type.tsx"]}],["/Users/dmitry.avilov/a/my/components/src/components/Button/Button.tsx",{"fileContent":"import classnames from 'classnames/bind';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport { ButtonPropsType } from './_types';\nimport styles from './Button.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Button';\n\nexport const Button: FunctionComponent<ButtonPropsType> = memo(\n    ({\n        children,\n        className,\n        id,\n        isDisabled = false,\n        isFullWidth = false,\n        leftIcon: LeftIcon,\n        onClick,\n        rightIcon: RightIcon,\n        text = '',\n        type = 'button',\n        variant = 'primary',\n    }) => {\n        const handleClick = useCallback(\n            (event: React.MouseEvent<HTMLElement>) => {\n                if (onClick && !isDisabled) {\n                    onClick({ event, id });\n                }\n            },\n            [id, isDisabled, onClick]\n        );\n\n        return (\n            <button\n                id={id}\n                className={cn(\n                    CLASS_NAME,\n                    {\n                        [`${CLASS_NAME}--isSecondary`]: variant === 'secondary',\n                        [`${CLASS_NAME}--isDisabled`]: isDisabled,\n                        [`${CLASS_NAME}--isFullWidth`]: isFullWidth,\n                    },\n                    className\n                )}\n                type={type}\n                onClick={handleClick}\n                disabled={isDisabled}\n            >\n                {children || (\n                    <>\n                        {LeftIcon && (\n                            <span className={cn(`${CLASS_NAME}__icon--left`)}>\n                                <LeftIcon />\n                            </span>\n                        )}\n                        {text && <span className={cn(`${CLASS_NAME}__text`)}>{text}</span>}\n                        {RightIcon && (\n                            <span className={cn(`${CLASS_NAME}__icon--right`)}>\n                                <RightIcon />\n                            </span>\n                        )}\n                    </>\n                )}\n            </button>\n        );\n    }\n);\n\nButton.displayName = 'Button';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Button/_types/props-type.tsx"]}],["/Users/dmitry.avilov/a/my/components/src/components/Button/_types/index.ts",{"fileContent":"export * from './props-type';\n\nexport type ButtonChangeParamsType = {\n  event: React.MouseEvent<HTMLElement>;\n  id?: string;\n}\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/Button/_types/props-type.tsx","/Users/dmitry.avilov/a/my/components/src/components/Button/_types/index.ts"]}],["/Users/dmitry.avilov/a/my/components/src/components/Button/_types/props-type.tsx",{"fileContent":"import { ButtonChangeParamsType } from \".\";\n\nexport type ButtonPropsType = {\n    /***\n     * Кастомное содержимое кнопки\n     */\n    children?: React.ReactNode;\n    /**\n     * className для переопределени дефолтных стилей\n     */\n    className?: string;\n    /**\n     * Идентификатор кнопки\n     */\n    id?: string;\n    /**\n     * Индикатор не активной кнопки\n     */\n    isDisabled?: boolean;\n    /**\n     * Индикатор не активной кнопки\n     */\n    isFullWidth?: boolean;\n    /**\n     * Иконка слева от текста\n     */\n    leftIcon?: React.ElementType;\n    /**\n     * Обработчик нажатия кнопки\n     */\n    onClick?: (params: ButtonChangeParamsType) => void;\n    /**\n     * Иконка справа от текста\n     */\n    rightIcon?: React.ElementType;\n    /**\n     * Текст в кнопке, отображается, если НЕ передан children\n     */\n    text?: string;\n    /**\n     * Тип кнопки\n     */\n    type?: 'button' | 'submit' | 'reset';\n    /**\n     * Вариант кнопки\n     */\n    variant?: 'primary' | 'secondary';\n};","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/components/src/components/Button/_types/props-type.tsx"]}],["/Users/dmitry.avilov/a/my/components/src/components/Checkbox/index.ts",{"fileContent":"export * from './Checkbox';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/Checkbox/Checkbox.tsx","/Users/dmitry.avilov/a/my/components/src/components/index.ts"]}],["/Users/dmitry.avilov/a/my/components/src/components/CheckboxList/index.ts",{"fileContent":"export * from './CheckboxList';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/components/src/components/CheckboxList/CheckboxList.tsx"]}],["/Users/dmitry.avilov/a/my/components/src/components/CheckboxList/CheckboxList.tsx",{"fileContent":"import React from 'react';\nimport classnames from 'classnames/bind';\nimport { Checkbox, CheckboxClickParamsType } from 'components';\nimport styles from './CheckboxList.modules.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'CheckboxList';\n\nexport type CheckboxItemType = {\n    id: string;\n    label?: string;\n    name?: string;\n    value: boolean;\n};\n\nexport type CheckboxListPropsType = {\n    isDisabled?: boolean;\n    isLeftLabel?: boolean;\n    isSquare?: boolean;\n    items: Array<CheckboxItemType>;\n    onClick?: (params: CheckboxClickParamsType) => void;\n};\n\nexport const CheckboxList: React.FC<CheckboxListPropsType> = ({\n    isDisabled,\n    isLeftLabel = false,\n    isSquare = false,\n    items,\n    onClick,\n}) => {\n    return (\n        <div className={cn(CLASS_NAME, { [`${CLASS_NAME}--isLeftLabel`]: isLeftLabel })}>\n            {items.map((item) => (\n                <Checkbox\n                    key={item.id}\n                    onClick={onClick}\n                    isDisabled={isDisabled}\n                    isLeftLabel={isLeftLabel}\n                    isSquare={isSquare}\n                    className={cn(`${CLASS_NAME}__item`)}\n                    {...item}\n                />\n            ))}\n        </div>\n    );\n};\n","resolvedModuleNames":[]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/__test__/Checkbox.test.tsx",{"fileContent":"import React from 'react';\nimport { shallow } from 'enzyme';\nimport { Checkbox, CheckboxPropsType } from '../Checkbox';\n\nconst getComponent = (props: CheckboxPropsType) => shallow(<Checkbox {...props} />);\n\ndescribe('Badge component', () => {\n    it('should display count', () => {\n        const components = getComponent({\n            id: 'TEST_ID',\n            className: 'TEST_CLASS_NAME',\n            value: false,\n        });\n        expect(components.hasClass('TEST_CLASS_NAME')).toBe(true);\n    });\n});\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/Checkbox.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/Checkbox.tsx",{"fileContent":"import React, { useCallback, useRef } from 'react';\nimport classnames from 'classnames/bind';\nimport { Icon } from 'components';\nimport styles from './Checkbox.modules.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Checkbox';\n\nexport type CheckboxClickParamsType = { id: string; value: boolean };\n\nexport type CheckboxPropsType = {\n    className?: string;\n    id: string;\n    isDisabled?: boolean;\n    isLeftLabel?: boolean;\n    isSquare?: boolean;\n    label?: string;\n    name?: string;\n    onClick?: (params: CheckboxClickParamsType) => void;\n    value: boolean;\n};\n\nexport const Checkbox: React.FC<CheckboxPropsType> = ({\n    className,\n    id,\n    isDisabled = false,\n    isLeftLabel = false,\n    isSquare = false,\n    label,\n    name,\n    onClick,\n    value,\n}) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const handleChange = useCallback(\n        (event: any) => {\n            if (!isDisabled && onClick) {\n                onClick({ id, value: event.target.checked as boolean });\n            }\n        },\n        [id, isDisabled, onClick]\n    );\n\n    const handleClick = useCallback(() => {\n        const input = inputRef.current;\n\n        if (input && !input.disabled) {\n            input.click();\n        }\n    }, []);\n\n    return (\n        <div className={cn(CLASS_NAME, { [`${CLASS_NAME}--isLeftLabel`]: isLeftLabel }, className)}>\n            <input\n                id={id}\n                ref={inputRef}\n                name={name}\n                type=\"checkbox\"\n                checked={value}\n                className={cn(`${CLASS_NAME}__input`)}\n                onClick={handleChange}\n                disabled={isDisabled}\n            />\n            <button\n                className={cn(`${CLASS_NAME}__icon-wrapper`, {\n                    [`${CLASS_NAME}__icon-wrapper--isChecked`]: value,\n                    [`${CLASS_NAME}__icon-wrapper--isDisabled`]: isDisabled,\n                    [`${CLASS_NAME}__icon-wrapper--isSquare`]: isSquare,\n                })}\n                onClick={handleClick}\n            >\n                {value && <Icon name=\"ok-outlined\" className={cn(`${CLASS_NAME}__icon`)} />}\n            </button>\n            {label && (\n                <label\n                    htmlFor={id}\n                    className={cn(`${CLASS_NAME}__label`, {\n                        [`${CLASS_NAME}__label--isLeftLabel`]: isLeftLabel,\n                    })}\n                >\n                    {label}\n                </label>\n            )}\n        </div>\n    );\n};\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts",{"fileContent":"export * from './Button';\nexport * from './Checkbox';\nexport * from './CheckboxList';\nexport * from './Icon';\n// export * from './MediaPlayer';\nexport * from './Modal';\nexport * from './Notifications';\nexport * from './Overlay';\nexport * from './Portal';\nexport * from './Preloader';\nexport * from './ResizeElement';\nexport * from './ThumbSlider';\nexport * from './Toggle';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/Button.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/Checkbox.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/CheckboxList.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/Icon.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/Modal.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/Notifications.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/Overlay.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/Portal.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/Preloader.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/_types.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/ResizeElement.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/ThumbSlider.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/Toggle.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/_types/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/index.ts",{"fileContent":"export * from './Button';\nexport * from './_types';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/Button.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/props-type.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/Button.tsx",{"fileContent":"import classnames from 'classnames/bind';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport { ButtonPropsType } from './_types';\nimport styles from './Button.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Button';\n\nexport const Button: FunctionComponent<ButtonPropsType> = memo(\n    ({\n        children,\n        className,\n        id,\n        isDisabled = false,\n        isFullWidth = false,\n        leftIcon: LeftIcon,\n        onClick,\n        rightIcon: RightIcon,\n        text = '',\n        type = 'button',\n        variant = 'primary',\n    }) => {\n        const handleClick = useCallback(\n            (event: React.MouseEvent<HTMLElement>) => {\n                if (onClick && !isDisabled) {\n                    onClick({ event, id });\n                }\n            },\n            [id, isDisabled, onClick]\n        );\n\n        return (\n            <button\n                id={id}\n                className={cn(\n                    CLASS_NAME,\n                    {\n                        [`${CLASS_NAME}--isSecondary`]: variant === 'secondary',\n                        [`${CLASS_NAME}--isDisabled`]: isDisabled,\n                        [`${CLASS_NAME}--isFullWidth`]: isFullWidth,\n                    },\n                    className\n                )}\n                type={type}\n                onClick={handleClick}\n                disabled={isDisabled}\n            >\n                {children || (\n                    <>\n                        {LeftIcon && (\n                            <span className={cn(`${CLASS_NAME}__icon--left`)}>\n                                <LeftIcon />\n                            </span>\n                        )}\n                        {text && <span className={cn(`${CLASS_NAME}__text`)}>{text}</span>}\n                        {RightIcon && (\n                            <span className={cn(`${CLASS_NAME}__icon--right`)}>\n                                <RightIcon />\n                            </span>\n                        )}\n                    </>\n                )}\n            </button>\n        );\n    }\n);\n\nButton.displayName = 'Button';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/props-type.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/index.ts",{"fileContent":"export * from './props-type';\n\nexport type ButtonChangeParamsType = {\n  event: React.MouseEvent<HTMLElement>;\n  id?: string;\n}\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/props-type.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/props-type.tsx",{"fileContent":"import { ButtonChangeParamsType } from \".\";\n\nexport type ButtonPropsType = {\n    /***\n     * Кастомное содержимое кнопки\n     */\n    children?: React.ReactNode;\n    /**\n     * className для переопределени дефолтных стилей\n     */\n    className?: string;\n    /**\n     * Идентификатор кнопки\n     */\n    id?: string;\n    /**\n     * Индикатор не активной кнопки\n     */\n    isDisabled?: boolean;\n    /**\n     * Индикатор не активной кнопки\n     */\n    isFullWidth?: boolean;\n    /**\n     * Иконка слева от текста\n     */\n    leftIcon?: React.ElementType;\n    /**\n     * Обработчик нажатия кнопки\n     */\n    onClick?: (params: ButtonChangeParamsType) => void;\n    /**\n     * Иконка справа от текста\n     */\n    rightIcon?: React.ElementType;\n    /**\n     * Текст в кнопке, отображается, если НЕ передан children\n     */\n    text?: string;\n    /**\n     * Тип кнопки\n     */\n    type?: 'button' | 'submit' | 'reset';\n    /**\n     * Вариант кнопки\n     */\n    variant?: 'primary' | 'secondary';\n};","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/_types/props-type.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/index.ts",{"fileContent":"export * from './Checkbox';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/Checkbox.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/index.ts",{"fileContent":"export * from './CheckboxList';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/CheckboxList.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/CheckboxList.tsx",{"fileContent":"import React from 'react';\nimport classnames from 'classnames/bind';\nimport { Checkbox, CheckboxClickParamsType } from 'components';\nimport styles from './CheckboxList.modules.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'CheckboxList';\n\nexport type CheckboxItemType = {\n    id: string;\n    label?: string;\n    name?: string;\n    value: boolean;\n};\n\nexport type CheckboxListPropsType = {\n    isDisabled?: boolean;\n    isLeftLabel?: boolean;\n    isSquare?: boolean;\n    items: Array<CheckboxItemType>;\n    onClick?: (params: CheckboxClickParamsType) => void;\n};\n\nexport const CheckboxList: React.FC<CheckboxListPropsType> = ({\n    isDisabled,\n    isLeftLabel = false,\n    isSquare = false,\n    items,\n    onClick,\n}) => {\n    return (\n        <div className={cn(CLASS_NAME, { [`${CLASS_NAME}--isLeftLabel`]: isLeftLabel })}>\n            {items.map((item) => (\n                <Checkbox\n                    key={item.id}\n                    onClick={onClick}\n                    isDisabled={isDisabled}\n                    isLeftLabel={isLeftLabel}\n                    isSquare={isSquare}\n                    className={cn(`${CLASS_NAME}__item`)}\n                    {...item}\n                />\n            ))}\n        </div>\n    );\n};\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/index.ts",{"fileContent":"export * from './Icon';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/Icon.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/Icon.tsx",{"fileContent":"import React from 'react';\n\nexport type PropsType = {\n    name?: string;\n    color?: string;\n    className?: string;\n    onClick?: () => void;\n};\n\n// export const CloseIcon: React.FunctionComponent<PropsType> = ({\nexport const Icon: React.FunctionComponent<PropsType> = ({\n    color = '#023564',\n    className = '',\n    onClick,\n}) => {\n    return (\n        <svg\n            className={className}\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            onClick={onClick}\n        >\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M0.362893 0.362893C0.84675 -0.120964 1.63124 -0.120964 2.11509 0.362893L10 8.2478L17.8849 0.362893C18.3688 -0.120964 19.1532 -0.120964 19.6371 0.362893C20.121 0.84675 20.121 1.63124 19.6371 2.11509L11.7522 10L19.6371 17.8849C20.121 18.3688 20.121 19.1532 19.6371 19.6371C19.1532 20.121 18.3688 20.121 17.8849 19.6371L10 11.7522L2.11509 19.6371C1.63124 20.121 0.84675 20.121 0.362893 19.6371C-0.120964 19.1532 -0.120964 18.3688 0.362893 17.8849L8.2478 10L0.362893 2.11509C-0.120964 1.63124 -0.120964 0.84675 0.362893 0.362893Z\"\n                fill={color}\n            />\n        </svg>\n    );\n};\n","resolvedModuleNames":[]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/index.ts",{"fileContent":"export * from './_types';\nexport * from './_utils';\nexport * from './MediaPlayer';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/_types.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/_utils.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/MediaPlayer.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/_components/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/_types.ts",{"fileContent":"export type MediaPlayerFileType = {\n    id: string;\n    name: string;\n    type: string;\n    /** Ссылка содержимое файла. */\n    src: string;\n    mimeType: string;\n    /** Ссылка на картинку, которая будет отображаться, пока видео не доступно или не вопроизводится. Используется для видео. */\n    posterUrl?: string;\n};\n\nexport type MediaPlayerPropsType = {\n    /** Флаг, который отвечает за показ плеера */\n    isOpened?: boolean;\n    /** Колбэк, для обработки закрытия плеера */\n    onClose: () => void;\n    /** Колбэк, для включения предыдущего файла */\n    onClickPrevFile: (params: { file: MediaPlayerFileType }) => void;\n    /** Колбэк, для включения следующего файла */\n    onClickNextFile: (params: { file: MediaPlayerFileType }) => void;\n    /** Файл который нужно воспроизвести */\n    file: MediaPlayerFileType;\n    /** Время таймера через который скроются контролы после движения мышки */\n    delay?: number;\n};\n","resolvedModuleNames":[]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/_utils.ts",{"fileContent":"import { getDisplayedNumber } from '_utils';\nimport { MediaPlayerFileType } from './_types';\n\ntype ParamsType = {\n    list: Array<MediaPlayerFileType>;\n    currentFile: MediaPlayerFileType;\n};\n\nconst getPrevFile = ({ list, currentFile }: ParamsType): MediaPlayerFileType => {\n    const currentFileIndex = list.findIndex((item) => item.id === currentFile.id);\n\n    if (currentFileIndex === list.length - 1) {\n        return list[0];\n    }\n\n    return list[currentFileIndex + 1];\n};\n\nconst getNextFile = ({ list, currentFile }: ParamsType): MediaPlayerFileType => {\n    const currentFileIndex = list.findIndex((item) => item.id === currentFile.id);\n\n    if (currentFileIndex === 0) {\n        return list[list.length - 1];\n    }\n\n    return list[currentFileIndex - 1];\n};\n\nexport const getDisplayedCurrentTime = (time: number): string => {\n    const amountOfSecondsInHour = 60 * 60;\n    let hours = Math.floor(time / amountOfSecondsInHour);\n    const remainOfHours = time % amountOfSecondsInHour;\n    let mimunes = Math.floor(remainOfHours / 60);\n    let seconds = Math.ceil(remainOfHours % 60);\n\n    if (seconds === 60) {\n        seconds = 0;\n        mimunes = mimunes + 1;\n    }\n    if (mimunes === 60) {\n        mimunes = 0;\n        hours = hours + 1;\n    }\n\n    const result = `${getDisplayedNumber(mimunes)}:${getDisplayedNumber(seconds)}`;\n\n    return hours === 0 ? result : `${getDisplayedNumber(hours)}:${result}`;\n};\n\nexport const MediaPlayerTools = {\n    getPrevFile,\n    getNextFile,\n};\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/MediaPlayer/_types.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/index.ts",{"fileContent":"export * from './Modal';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/Modal.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/Modal.tsx",{"fileContent":"import React, { memo, useCallback, useEffect } from 'react';\nimport classnames from 'classnames/bind';\nimport { Icon, Portal, Overlay } from 'components';\nimport styles from './Modal.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Modal';\n\nexport type ModalPropsType = {\n    isOpened: boolean;\n    withIcon?: boolean;\n    modalClassName: string;\n    closeIconClassName: string;\n    children: React.ReactNode;\n    onClose: () => void;\n};\n\nexport const Modal: React.FunctionComponent<ModalPropsType> = memo(\n    ({\n        isOpened,\n        children,\n        modalClassName = '',\n        closeIconClassName = '',\n        withIcon = false,\n        onClose,\n    }) => {\n        const handleDocumentKeyDown = useCallback(\n            ({ keyCode }) => {\n                if (keyCode === keyCode.ESCAPE) {\n                    onClose();\n                }\n            },\n            [onClose]\n        );\n\n        useEffect(() => {\n            document.addEventListener('keydown', handleDocumentKeyDown);\n\n            return () => {\n                document.removeEventListener('keydown', handleDocumentKeyDown);\n            };\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        return (\n            <Portal isOpened={isOpened}>\n                <Overlay>\n                    <div className={cn(CLASS_NAME, modalClassName)}>\n                        {withIcon && (\n                            <Icon\n                                className={cn(`${CLASS_NAME}__icon`, closeIconClassName)}\n                                onClick={onClose}\n                            />\n                        )}\n                        {children}\n                    </div>\n                </Overlay>\n            </Portal>\n        );\n    }\n);\n\nModal.displayName = 'Modal';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/index.ts",{"fileContent":"export * from './Notifications';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/Notifications.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_types.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/Notifications.tsx",{"fileContent":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FunctionComponent } from 'react';\nimport classnames from 'classnames/bind';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport {\n    NotificationCloseType,\n    NotificationPositionHorizontalTypes,\n    NotificationPositionVerticalTypes,\n    NotificationType,\n} from './_types';\nimport { Notification } from './_components';\nimport styles from './Notifications.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Notifications';\n\nexport type NotificationsPropsType = {\n    notifications: Array<NotificationType>;\n    positionVertical?: NotificationPositionVerticalTypes;\n    positionHorizontal?: NotificationPositionHorizontalTypes;\n    delay?: number;\n    withClose?: boolean;\n    onClose: NotificationCloseType;\n};\n\nconst CSSTransitionTimeout = {\n    enter: 500,\n    exit: 500,\n};\n\nconst CSSTransitionCN = {\n    enter: cn(`${CLASS_NAME}__item--enter`),\n    exit: cn(`${CLASS_NAME}__item--exit`),\n};\n\nexport const Notifications: FunctionComponent<NotificationsPropsType> = ({\n    notifications,\n    positionVertical = 'bottom',\n    positionHorizontal = 'center',\n    delay,\n    withClose,\n    onClose,\n}) => {\n    return ReactDOM.createPortal(\n        <TransitionGroup\n            className={cn(\n                CLASS_NAME,\n                `${CLASS_NAME}--position-${positionVertical}`,\n                `${CLASS_NAME}--position-${positionHorizontal}`,\n                {\n                    [`${CLASS_NAME}--isVisible`]: Boolean(notifications.length),\n                }\n            )}\n        >\n            {notifications.map((notification: NotificationType) => (\n                <CSSTransition\n                    key={notification.id}\n                    timeout={CSSTransitionTimeout}\n                    classNames={CSSTransitionCN}\n                >\n                    <Notification\n                        {...notification}\n                        className={cn(`${CLASS_NAME}__item`, {\n                            [`${CLASS_NAME}__item--fromTop`]: positionVertical === 'top',\n                            [`${CLASS_NAME}__item--fromBottom`]: positionVertical === 'bottom',\n                        })}\n                        delay={delay}\n                        withClose={withClose}\n                        onClose={onClose}\n                    />\n                </CSSTransition>\n            ))}\n        </TransitionGroup>,\n        document.body\n    );\n};\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_types.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/Notification.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/index.ts",{"fileContent":"export * from './Notification';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/Notification.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_types.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/Notification.tsx",{"fileContent":"import React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\nimport classnames from 'classnames/bind';\nimport { Icon } from 'components';\nimport { NotificationCloseType, NotificationType } from '../_types';\nimport styles from './Notification.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Notification';\n\nexport type NotificationPropsType = NotificationType & {\n    className: string;\n    delay?: number;\n    withClose?: boolean;\n    onClose: NotificationCloseType;\n};\n\nexport const Notification: FunctionComponent<NotificationPropsType> = memo(\n    ({ id, message, type = 'info', className, delay = 3000, onClose, withClose = false }) => {\n        const [timerId, setTimerId] = useState<null | number>(null);\n\n        const handleClose = useCallback(() => onClose({ id }), []);\n\n        const handleMouseEnter = useCallback(() => {\n            if (timerId) {\n                clearTimeout(timerId);\n            }\n        }, [timerId]);\n\n        const handleMouseLeave = useCallback(() => {\n            setTimerId(Number(setTimeout(handleClose, delay)));\n        }, [delay]);\n\n        useEffect(() => {\n            setTimerId(Number(setTimeout(handleClose, delay)));\n        }, []);\n\n        return (\n            <div\n                className={cn(CLASS_NAME, `${CLASS_NAME}--type-${type}`, className)}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            >\n                <span className={cn(`${CLASS_NAME}__text`)}>{message}</span>\n                {withClose && (\n                    <span className={cn(`${CLASS_NAME}__close`)} onClick={handleClose}>\n                        <Icon className={cn(`${CLASS_NAME}__icon`)} />\n                    </span>\n                )}\n            </div>\n        );\n    }\n);\n\nNotification.displayName = 'Notification';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_types.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts",{"fileContent":"export * from './Overlay';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/Overlay.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/Overlay.tsx",{"fileContent":"import React, { FunctionComponent, memo, SyntheticEvent, ReactNode } from 'react';\nimport classnames from 'classnames/bind';\nimport styles from './Overlay.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Overlay';\n\nexport type OverlayPropsType = {\n    /** флаг меняющий свойство position с fixed на absolute */\n    isAbsolute?: boolean;\n    /** содержимое компонента */\n    children: ReactNode;\n    /** коллбек клика по оверлею */\n    onClick?: (event: SyntheticEvent) => void;\n    /** флаг меняющий backgroundColor на transparent */\n    isTransparent?: boolean;\n    /** флаг, который добавляет opacity для background */\n    withOpacity?: boolean;\n};\n\nexport const Overlay: FunctionComponent<OverlayPropsType> = memo(\n    ({\n        children,\n        isAbsolute = false,\n        isTransparent = false,\n        onClick = () => false,\n        withOpacity = true,\n    }: OverlayPropsType) => {\n        return (\n            <div\n                className={cn(CLASS_NAME, {\n                    [`${CLASS_NAME}--isAbsolute`]: isAbsolute,\n                    [`${CLASS_NAME}--isTransparent`]: isTransparent,\n                    [`${CLASS_NAME}--withOpacity`]: withOpacity,\n                })}\n                onClick={onClick}\n                role=\"presentation\"\n            >\n                {children}\n            </div>\n        );\n    }\n);\n\nOverlay.displayName = 'Overlay';\n","resolvedModuleNames":[]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts",{"fileContent":"export * from './Portal';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/Portal.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/Portal.tsx",{"fileContent":"import React, { memo } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport type PortalPropsType = {\n  isOpened: boolean;\n  children: React.ReactNode;\n};\n\nexport const Portal: React.FunctionComponent<PortalPropsType> = memo(({ isOpened, children }) => {\n  if (!isOpened) {\n    return null;\n  }\n\n  return (\n    ReactDOM.createPortal(children, document.body)\n  );\n})\n\n\nPortal.displayName = 'Portal'","resolvedModuleNames":[]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/index.ts",{"fileContent":"export * from './Preloader';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/Preloader.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/Preloader.tsx",{"fileContent":"import React, { FunctionComponent, memo, useMemo } from 'react';\nimport classnames from 'classnames/bind';\nimport { Overlay, Portal } from 'components';\nimport PreloaderIcon from './PreloaderIcon.svg';\nimport styles from './Preloader.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Preloader';\n\ntype PreloaderPropsType = {\n    className?: string;\n    isLoading?: boolean;\n    isAbsolute?: boolean;\n    isTransparent?: boolean;\n    size?: 'xs' | 's' | 'm' | 'l' | 'xl';\n    color?: 'dark' | 'white' | 'blue' | 'grey' | 'greyDark';\n};\n\nexport const Preloader: FunctionComponent<PreloaderPropsType> = memo(\n    ({\n        className,\n        isLoading = false,\n        isAbsolute = false,\n        isTransparent = false,\n        size = 'l',\n        color = 'blue',\n    }) => {\n        const Loader = useMemo(() => {\n            return () => (\n                <PreloaderIcon\n                    className={cn(\n                        CLASS_NAME,\n                        { [`${CLASS_NAME}--size-${size}`]: Boolean(size), [`${CLASS_NAME}--color-${color}`]: Boolean(color) },\n                        className\n                    )}\n                />\n            );\n        }, [size, color, className]);\n\n        if (isAbsolute) {\n            return isLoading ? <Loader /> : <></>;\n        }\n\n        return (\n            <Portal isOpened={isLoading}>\n                <Overlay isAbsolute={isAbsolute} isTransparent={isTransparent}>\n                    <Loader />\n                </Overlay>\n            </Portal>\n        );\n    }\n);\n\nPreloader.displayName = 'Preloader';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Button/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Checkbox/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/CheckboxList/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Icon/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Overlay/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Portal/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/index.ts",{"fileContent":"export * from './_types';\nexport * from './ResizeElement';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/_types.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/ResizeElement.tsx"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/_types.ts",{"fileContent":"export type ElementResizeListenerSize = {\n    width: number;\n    height: number;\n};\n\nexport type ElementResizeListenerPropsType = {\n    onResize: (viewSize: ElementResizeListenerSize) => void;\n};\n","resolvedModuleNames":[]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/ResizeElement.tsx",{"fileContent":"import React, { FunctionComponent, useCallback, useRef, useEffect, RefObject } from 'react';\nimport { ElementResizeListenerPropsType } from './_types';\n\nexport const ElementResizeListener: FunctionComponent<ElementResizeListenerPropsType> = ({\n    onResize,\n}) => {\n    const objectRef: RefObject<HTMLObjectElement> = useRef(null);\n\n    const handleResize = useCallback(() => {\n        if (objectRef.current) {\n            onResize({\n                width: objectRef.current.clientWidth,\n                height: objectRef.current.clientHeight,\n            });\n        }\n    }, []);\n\n    const handleLoad = useCallback(() => {\n        handleResize();\n\n        objectRef?.current?.contentWindow?.addEventListener('resize', handleResize);\n    }, []);\n\n    useEffect(() => {\n        return () => objectRef?.current?.contentWindow?.addEventListener('resize', handleResize);\n    }, []);\n\n    return (\n        <object\n            ref={objectRef}\n            tabIndex={-1}\n            type=\"text/html\"\n            data=\"about:blank\"\n            onLoad={handleLoad}\n            style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                height: '100%',\n                width: '100%',\n                pointerEvents: 'none',\n                zIndex: -1,\n                opacity: 0,\n            }}\n        />\n    );\n};\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/ResizeElement/_types.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/index.ts",{"fileContent":"export * from './ThumbSlider';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/ThumbSlider.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/_utils/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/ThumbSlider.tsx",{"fileContent":"import React, { memo, useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport { getBackground } from './_utils';\n\nimport './ThumbSlider.scss';\n\ntype PropsType = {\n    max?: number;\n    min?: number;\n    onChange: (params: any) => void;\n    value: number;\n    className?: string;\n};\n\nconst CLASS_NAME = 'ThumbSlider';\n\nexport const ThumbSlider = memo(({ className, max = 100, min = 0, onChange, value }: PropsType) => {\n    const [styles, setStyles] = useState({\n        background: getBackground({ progress: (value / max) * 100 }),\n    });\n\n    const handleChange = useCallback(\n        (event) => {\n            const value = event.target.value;\n            const progress = Math.round((value / max) * 100);\n\n            onChange({ value: progress });\n\n            setStyles({ background: getBackground({ progress }) });\n        },\n        [max, onChange]\n    );\n\n    return (\n        <input\n            className={cn(CLASS_NAME, className)}\n            style={styles}\n            type=\"range\"\n            min={min}\n            max={max}\n            onChange={handleChange}\n            value={value}\n        />\n    );\n});\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/_utils/index.ts","/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/_utils/getBackground.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/_utils/index.ts",{"fileContent":"export * from './getBackground';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/_utils/getBackground.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/ThumbSlider/_utils/getBackground.ts",{"fileContent":"type ParamsType = {\n    progress: number;\n};\n\nexport const getBackground = ({ progress }: ParamsType) => {\n    const active = '#42A3FF';\n    const inactive = '#323742';\n\n    return `linear-gradient(90deg, ${active} 0% ${progress}%, ${inactive} ${progress}% 100%)`;\n};\n","resolvedModuleNames":[]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/index.ts",{"fileContent":"export * from './Toggle';\nexport * from './_types';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/Toggle.tsx","/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/_types/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/Toggle.tsx",{"fileContent":"import classnames from 'classnames/bind';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport { TogglePropsType } from './_types';\nimport styles from './Toggle.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Toggle';\n\nexport const Toggle: FunctionComponent<TogglePropsType> = memo(\n    ({\n        className,\n        id,\n        isDisabled = false,\n        leftText = '',\n        leftTextClassName,\n        onClick,\n        rightText = '',\n        rightTextClassName,\n        thumbClassName,\n        value,\n    }) => {\n        const handleClick = useCallback(\n            (event: React.MouseEvent<HTMLElement>) => {\n                if (onClick && !isDisabled) {\n                    onClick({ event, id, value: !value });\n                }\n            },\n            [id, isDisabled, value, onClick]\n        );\n\n        return (\n            <div className={cn(`${CLASS_NAME}__wrapper`)}>\n                {Boolean(leftText) && (\n                    <span className={cn(`${CLASS_NAME}__leftText`, leftTextClassName)}>\n                        {leftText}\n                    </span>\n                )}\n                <button\n                    id={id}\n                    className={cn(\n                        CLASS_NAME,\n                        {\n                            [`${CLASS_NAME}--isDisabled`]: isDisabled,\n                            [`${CLASS_NAME}--isActive`]: value,\n                        },\n                        className\n                    )}\n                    onClick={handleClick}\n                    disabled={isDisabled}\n                >\n                    <span\n                        className={cn(\n                            `${CLASS_NAME}__thumb`,\n                            {\n                                [`${CLASS_NAME}__thumb--isActive`]: value,\n                            },\n                            thumbClassName\n                        )}\n                    />\n                </button>\n                {Boolean(rightText) && (\n                    <span className={cn(`${CLASS_NAME}__rightText`, rightTextClassName)}>\n                        {rightText}\n                    </span>\n                )}\n            </div>\n        );\n    }\n);\n\nToggle.displayName = 'Toggle';\n","resolvedModuleNames":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/_types/index.ts"]}],["/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/_types/index.ts",{"fileContent":"export type TogglePropsType = {\n  /** className для переопределени дефолтных стилей переключателя */\n  className?: string;\n  /** Идентификатор переключателя */\n  id?: string;\n  /** Индикатор не активного переключателя */\n  isDisabled?: boolean;\n  /** Текст который находится слева от переключателя */\n  leftText?: string;\n  /** className для текста слева от переключателя */\n  leftTextClassName?: string;\n  /** Обработчик нажатия переключателя */\n  onClick?: (params: ToggleClickParamsType) => void;\n  /** Текст который находится справа от переключателя */\n  rightText?: string;\n  /** className для текста справа от переключателя */\n  rightTextClassName?: string;\n  /** className для ползунка */\n  thumbClassName?: string;\n  /** Текущее значение */\n  value: boolean\n};\n\nexport type ToggleClickParamsType = {\n  event: React.MouseEvent<HTMLElement>;\n  id?: string;\n  value: boolean;\n}\n","resolvedModuleNames":[]}]]