{"file":"/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/Modal.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA4D;AAC5D,yDAAyC;AACzC,yCAAmD;AACnD,0EAAyC;AAEzC,IAAM,EAAE,GAAG,cAAU,CAAC,IAAI,CAAC,2BAAM,CAAC,CAAC;AACnC,IAAM,UAAU,GAAG,OAAO,CAAC;AAWd,QAAA,KAAK,GAA4C,YAAI,CAC9D,UAAC,EAOA;QANG,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,sBAAmB,EAAnB,cAAc,mBAAG,EAAE,KAAA,EACnB,0BAAuB,EAAvB,kBAAkB,mBAAG,EAAE,KAAA,EACvB,gBAAgB,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EAChB,OAAO,aAAA;IAEP,IAAM,qBAAqB,GAAG,mBAAW,CACrC,UAAC,EAAW;YAAT,OAAO,aAAA;QACN,IAAI,OAAO,KAAK,OAAO,CAAC,MAAM,EAAE;YAC5B,OAAO,EAAE,CAAC;SACb;IACL,CAAC,EACD,CAAC,OAAO,CAAC,CACZ,CAAC;IAEF,iBAAS,CAAC;QACN,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,qBAAqB,CAAC,CAAC;QAE5D,OAAO;YACH,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,qBAAqB,CAAC,CAAC;QACnE,CAAC,CAAC;QACF,uDAAuD;IAC3D,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACH,8BAAC,mBAAM,IAAC,QAAQ,EAAE,QAAQ;QACtB,8BAAC,oBAAO;YACJ,uCAAK,SAAS,EAAE,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;gBACzC,QAAQ,IAAI,CACT,8BAAC,iBAAI,IACD,SAAS,EAAE,EAAE,CAAI,UAAU,WAAQ,EAAE,kBAAkB,CAAC,EACxD,OAAO,EAAE,OAAO,GAClB,CACL;gBACA,QAAQ,CACP,CACA,CACL,CACZ,CAAC;AACN,CAAC,CACJ,CAAC;AAEF,aAAK,CAAC,WAAW,GAAG,OAAO,CAAC","names":[],"sources":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Modal/Modal.tsx"],"sourcesContent":["import React, { memo, useCallback, useEffect } from 'react';\nimport classnames from 'classnames/bind';\nimport { Icon, Portal, Overlay } from 'components';\nimport styles from './Modal.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Modal';\n\nexport type ModalPropsType = {\n    isOpened: boolean;\n    withIcon?: boolean;\n    modalClassName: string;\n    closeIconClassName: string;\n    children: React.ReactNode;\n    onClose: () => void;\n};\n\nexport const Modal: React.FunctionComponent<ModalPropsType> = memo(\n    ({\n        isOpened,\n        children,\n        modalClassName = '',\n        closeIconClassName = '',\n        withIcon = false,\n        onClose,\n    }) => {\n        const handleDocumentKeyDown = useCallback(\n            ({ keyCode }) => {\n                if (keyCode === keyCode.ESCAPE) {\n                    onClose();\n                }\n            },\n            [onClose]\n        );\n\n        useEffect(() => {\n            document.addEventListener('keydown', handleDocumentKeyDown);\n\n            return () => {\n                document.removeEventListener('keydown', handleDocumentKeyDown);\n            };\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        return (\n            <Portal isOpened={isOpened}>\n                <Overlay>\n                    <div className={cn(CLASS_NAME, modalClassName)}>\n                        {withIcon && (\n                            <Icon\n                                className={cn(`${CLASS_NAME}__icon`, closeIconClassName)}\n                                onClick={onClose}\n                            />\n                        )}\n                        {children}\n                    </div>\n                </Overlay>\n            </Portal>\n        );\n    }\n);\n\nModal.displayName = 'Modal';\n"],"version":3}