{"file":"/Users/dmitry.avilov/a/my/components/src/components/Checkbox/Checkbox.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAmD;AACnD,yDAAyC;AACzC,yCAAkC;AAClC,kFAA6C;AAE7C,IAAM,EAAE,GAAG,cAAU,CAAC,IAAI,CAAC,+BAAM,CAAC,CAAC;AACnC,IAAM,UAAU,GAAG,UAAU,CAAC;AAgBvB,IAAM,QAAQ,GAAgC,UAAC,EAUrD;;QATG,SAAS,eAAA,EACT,EAAE,QAAA,EACF,kBAAkB,EAAlB,UAAU,mBAAG,KAAK,KAAA,EAClB,mBAAmB,EAAnB,WAAW,mBAAG,KAAK,KAAA,EACnB,gBAAgB,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EAChB,KAAK,WAAA,EACL,IAAI,UAAA,EACJ,OAAO,aAAA,EACP,KAAK,WAAA;IAEL,IAAM,QAAQ,GAAG,cAAM,CAAmB,IAAI,CAAC,CAAC;IAEhD,IAAM,YAAY,GAAG,mBAAW,CAC5B,UAAC,KAAU;QACP,IAAI,CAAC,UAAU,IAAI,OAAO,EAAE;YACxB,OAAO,CAAC,EAAE,EAAE,IAAA,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,OAAkB,EAAE,CAAC,CAAC;SAC3D;IACL,CAAC,EACD,CAAC,EAAE,EAAE,UAAU,EAAE,OAAO,CAAC,CAC5B,CAAC;IAEF,IAAM,WAAW,GAAG,mBAAW,CAAC;QAC5B,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;QAE/B,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC1B,KAAK,CAAC,KAAK,EAAE,CAAC;SACjB;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACH,uCAAK,SAAS,EAAE,EAAE,CAAC,UAAU,YAAI,GAAI,UAAU,kBAAe,IAAG,WAAW,OAAI,SAAS,CAAC;QACtF,yCACI,EAAE,EAAE,EAAE,EACN,GAAG,EAAE,QAAQ,EACb,IAAI,EAAE,IAAI,EACV,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,KAAK,EACd,SAAS,EAAE,EAAE,CAAI,UAAU,YAAS,CAAC,EACrC,OAAO,EAAE,YAAY,EACrB,QAAQ,EAAE,UAAU,GACtB;QACF,0CACI,SAAS,EAAE,EAAE,CAAI,UAAU,mBAAgB;gBACvC,GAAI,UAAU,8BAA2B,IAAG,KAAK;gBACjD,GAAI,UAAU,+BAA4B,IAAG,UAAU;gBACvD,GAAI,UAAU,6BAA0B,IAAG,QAAQ;oBACrD,EACF,OAAO,EAAE,WAAW,IAEnB,KAAK,IAAI,8BAAC,iBAAI,IAAC,IAAI,EAAC,aAAa,EAAC,SAAS,EAAE,EAAE,CAAI,UAAU,WAAQ,CAAC,GAAI,CACtE;QACR,KAAK,IAAI,CACN,yCACI,OAAO,EAAE,EAAE,EACX,SAAS,EAAE,EAAE,CAAI,UAAU,YAAS;gBAChC,GAAI,UAAU,yBAAsB,IAAG,WAAW;oBACpD,IAED,KAAK,CACF,CACX,CACC,CACT,CAAC;AACN,CAAC,CAAC;AAhEW,QAAA,QAAQ,YAgEnB","names":[],"sources":["/Users/dmitry.avilov/a/my/components/src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["import React, { useCallback, useRef } from 'react';\nimport classnames from 'classnames/bind';\nimport { Icon } from 'components';\nimport styles from './Checkbox.modules.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Checkbox';\n\nexport type CheckboxClickParamsType = { id: string; value: boolean };\n\nexport type CheckboxPropsType = {\n    className?: string;\n    id: string;\n    isDisabled?: boolean;\n    isLeftLabel?: boolean;\n    isSquare?: boolean;\n    label?: string;\n    name?: string;\n    onClick?: (params: CheckboxClickParamsType) => void;\n    value: boolean;\n};\n\nexport const Checkbox: React.FC<CheckboxPropsType> = ({\n    className,\n    id,\n    isDisabled = false,\n    isLeftLabel = false,\n    isSquare = false,\n    label,\n    name,\n    onClick,\n    value,\n}) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const handleChange = useCallback(\n        (event: any) => {\n            if (!isDisabled && onClick) {\n                onClick({ id, value: event.target.checked as boolean });\n            }\n        },\n        [id, isDisabled, onClick]\n    );\n\n    const handleClick = useCallback(() => {\n        const input = inputRef.current;\n\n        if (input && !input.disabled) {\n            input.click();\n        }\n    }, []);\n\n    return (\n        <div className={cn(CLASS_NAME, { [`${CLASS_NAME}--isLeftLabel`]: isLeftLabel }, className)}>\n            <input\n                id={id}\n                ref={inputRef}\n                name={name}\n                type=\"checkbox\"\n                checked={value}\n                className={cn(`${CLASS_NAME}__input`)}\n                onClick={handleChange}\n                disabled={isDisabled}\n            />\n            <button\n                className={cn(`${CLASS_NAME}__icon-wrapper`, {\n                    [`${CLASS_NAME}__icon-wrapper--isChecked`]: value,\n                    [`${CLASS_NAME}__icon-wrapper--isDisabled`]: isDisabled,\n                    [`${CLASS_NAME}__icon-wrapper--isSquare`]: isSquare,\n                })}\n                onClick={handleClick}\n            >\n                {value && <Icon name=\"ok-outlined\" className={cn(`${CLASS_NAME}__icon`)} />}\n            </button>\n            {label && (\n                <label\n                    htmlFor={id}\n                    className={cn(`${CLASS_NAME}__label`, {\n                        [`${CLASS_NAME}__label--isLeftLabel`]: isLeftLabel,\n                    })}\n                >\n                    {label}\n                </label>\n            )}\n        </div>\n    );\n};\n"],"version":3}