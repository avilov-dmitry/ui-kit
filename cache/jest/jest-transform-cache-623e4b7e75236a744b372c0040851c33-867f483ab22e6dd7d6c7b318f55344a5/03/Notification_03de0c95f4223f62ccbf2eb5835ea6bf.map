{"file":"/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/Notification.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAyF;AACzF,yDAAyC;AACzC,yCAAkC;AAElC,wFAAgD;AAEhD,IAAM,EAAE,GAAG,cAAU,CAAC,IAAI,CAAC,kCAAM,CAAC,CAAC;AACnC,IAAM,UAAU,GAAG,cAAc,CAAC;AASrB,QAAA,YAAY,GAA6C,YAAI,CACtE,UAAC,EAAmF;QAAjF,EAAE,QAAA,EAAE,OAAO,aAAA,EAAE,YAAa,EAAb,IAAI,mBAAG,MAAM,KAAA,EAAE,SAAS,eAAA,EAAE,aAAY,EAAZ,KAAK,mBAAG,IAAI,KAAA,EAAE,OAAO,aAAA,EAAE,iBAAiB,EAAjB,SAAS,mBAAG,KAAK,KAAA;IACxE,IAAA,KAAwB,gBAAQ,CAAgB,IAAI,CAAC,EAApD,OAAO,QAAA,EAAE,UAAU,QAAiC,CAAC;IAE5D,IAAM,WAAW,GAAG,mBAAW,CAAC,cAAM,OAAA,OAAO,CAAC,EAAE,EAAE,IAAA,EAAE,CAAC,EAAf,CAAe,EAAE,EAAE,CAAC,CAAC;IAE3D,IAAM,gBAAgB,GAAG,mBAAW,CAAC;QACjC,IAAI,OAAO,EAAE;YACT,YAAY,CAAC,OAAO,CAAC,CAAC;SACzB;IACL,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,IAAM,gBAAgB,GAAG,mBAAW,CAAC;QACjC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,iBAAS,CAAC;QACN,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACH,uCACI,SAAS,EAAE,EAAE,CAAC,UAAU,EAAK,UAAU,eAAU,IAAM,EAAE,SAAS,CAAC,EACnE,YAAY,EAAE,gBAAgB,EAC9B,YAAY,EAAE,gBAAgB;QAE9B,wCAAM,SAAS,EAAE,EAAE,CAAI,UAAU,WAAQ,CAAC,IAAG,OAAO,CAAQ;QAC3D,SAAS,IAAI,CACV,wCAAM,SAAS,EAAE,EAAE,CAAI,UAAU,YAAS,CAAC,EAAE,OAAO,EAAE,WAAW;YAC7D,8BAAC,iBAAI,IAAC,SAAS,EAAE,EAAE,CAAI,UAAU,WAAQ,CAAC,GAAI,CAC3C,CACV,CACC,CACT,CAAC;AACN,CAAC,CACJ,CAAC;AAEF,oBAAY,CAAC,WAAW,GAAG,cAAc,CAAC","names":[],"sources":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Notifications/_components/Notification.tsx"],"sourcesContent":["import React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\nimport classnames from 'classnames/bind';\nimport { Icon } from 'components';\nimport { NotificationCloseType, NotificationType } from '../_types';\nimport styles from './Notification.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Notification';\n\nexport type NotificationPropsType = NotificationType & {\n    className: string;\n    delay?: number;\n    withClose?: boolean;\n    onClose: NotificationCloseType;\n};\n\nexport const Notification: FunctionComponent<NotificationPropsType> = memo(\n    ({ id, message, type = 'info', className, delay = 3000, onClose, withClose = false }) => {\n        const [timerId, setTimerId] = useState<null | number>(null);\n\n        const handleClose = useCallback(() => onClose({ id }), []);\n\n        const handleMouseEnter = useCallback(() => {\n            if (timerId) {\n                clearTimeout(timerId);\n            }\n        }, [timerId]);\n\n        const handleMouseLeave = useCallback(() => {\n            setTimerId(Number(setTimeout(handleClose, delay)));\n        }, [delay]);\n\n        useEffect(() => {\n            setTimerId(Number(setTimeout(handleClose, delay)));\n        }, []);\n\n        return (\n            <div\n                className={cn(CLASS_NAME, `${CLASS_NAME}--type-${type}`, className)}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            >\n                <span className={cn(`${CLASS_NAME}__text`)}>{message}</span>\n                {withClose && (\n                    <span className={cn(`${CLASS_NAME}__close`)} onClick={handleClose}>\n                        <Icon className={cn(`${CLASS_NAME}__icon`)} />\n                    </span>\n                )}\n            </div>\n        );\n    }\n);\n\nNotification.displayName = 'Notification';\n"],"version":3}