{"file":"/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/Toggle.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAAyC;AACzC,6CAAoE;AAEpE,4EAA0C;AAE1C,IAAM,EAAE,GAAG,cAAU,CAAC,IAAI,CAAC,4BAAM,CAAC,CAAC;AACnC,IAAM,UAAU,GAAG,QAAQ,CAAC;AAEf,QAAA,MAAM,GAAuC,YAAI,CAC1D,UAAC,EAWA;;QAVG,SAAS,eAAA,EACT,EAAE,QAAA,EACF,kBAAkB,EAAlB,UAAU,mBAAG,KAAK,KAAA,EAClB,gBAAa,EAAb,QAAQ,mBAAG,EAAE,KAAA,EACb,iBAAiB,uBAAA,EACjB,OAAO,aAAA,EACP,iBAAc,EAAd,SAAS,mBAAG,EAAE,KAAA,EACd,kBAAkB,wBAAA,EAClB,cAAc,oBAAA,EACd,KAAK,WAAA;IAEL,IAAM,WAAW,GAAG,mBAAW,CAC3B,UAAC,KAAoC;QACjC,IAAI,OAAO,IAAI,CAAC,UAAU,EAAE;YACxB,OAAO,CAAC,EAAE,KAAK,OAAA,EAAE,EAAE,IAAA,EAAE,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;SACzC;IACL,CAAC,EACD,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,CACnC,CAAC;IAEF,OAAO,CACH,uCAAK,SAAS,EAAE,EAAE,CAAI,UAAU,cAAW,CAAC;QACvC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAClB,wCAAM,SAAS,EAAE,EAAE,CAAI,UAAU,eAAY,EAAE,iBAAiB,CAAC,IAC5D,QAAQ,CACN,CACV;QACD,0CACI,EAAE,EAAE,EAAE,EACN,SAAS,EAAE,EAAE,CACT,UAAU;gBAEN,GAAI,UAAU,iBAAc,IAAG,UAAU;gBACzC,GAAI,UAAU,eAAY,IAAG,KAAK;qBAEtC,SAAS,CACZ,EACD,OAAO,EAAE,WAAW,EACpB,QAAQ,EAAE,UAAU;YAEpB,wCACI,SAAS,EAAE,EAAE,CACN,UAAU,YAAS;oBAElB,GAAI,UAAU,sBAAmB,IAAG,KAAK;yBAE7C,cAAc,CACjB,GACH,CACG;QACR,OAAO,CAAC,SAAS,CAAC,IAAI,CACnB,wCAAM,SAAS,EAAE,EAAE,CAAI,UAAU,gBAAa,EAAE,kBAAkB,CAAC,IAC9D,SAAS,CACP,CACV,CACC,CACT,CAAC;AACN,CAAC,CACJ,CAAC;AAEF,cAAM,CAAC,WAAW,GAAG,QAAQ,CAAC","names":[],"sources":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Toggle/Toggle.tsx"],"sourcesContent":["import classnames from 'classnames/bind';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport { TogglePropsType } from './_types';\nimport styles from './Toggle.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Toggle';\n\nexport const Toggle: FunctionComponent<TogglePropsType> = memo(\n    ({\n        className,\n        id,\n        isDisabled = false,\n        leftText = '',\n        leftTextClassName,\n        onClick,\n        rightText = '',\n        rightTextClassName,\n        thumbClassName,\n        value,\n    }) => {\n        const handleClick = useCallback(\n            (event: React.MouseEvent<HTMLElement>) => {\n                if (onClick && !isDisabled) {\n                    onClick({ event, id, value: !value });\n                }\n            },\n            [id, isDisabled, value, onClick]\n        );\n\n        return (\n            <div className={cn(`${CLASS_NAME}__wrapper`)}>\n                {Boolean(leftText) && (\n                    <span className={cn(`${CLASS_NAME}__leftText`, leftTextClassName)}>\n                        {leftText}\n                    </span>\n                )}\n                <button\n                    id={id}\n                    className={cn(\n                        CLASS_NAME,\n                        {\n                            [`${CLASS_NAME}--isDisabled`]: isDisabled,\n                            [`${CLASS_NAME}--isActive`]: value,\n                        },\n                        className\n                    )}\n                    onClick={handleClick}\n                    disabled={isDisabled}\n                >\n                    <span\n                        className={cn(\n                            `${CLASS_NAME}__thumb`,\n                            {\n                                [`${CLASS_NAME}__thumb--isActive`]: value,\n                            },\n                            thumbClassName\n                        )}\n                    />\n                </button>\n                {Boolean(rightText) && (\n                    <span className={cn(`${CLASS_NAME}__rightText`, rightTextClassName)}>\n                        {rightText}\n                    </span>\n                )}\n            </div>\n        );\n    }\n);\n\nToggle.displayName = 'Toggle';\n"],"version":3}