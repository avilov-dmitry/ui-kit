{"file":"/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/Preloader.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAgE;AAChE,yDAAyC;AACzC,yCAA6C;AAC7C,0EAAgD;AAChD,kFAA6C;AAE7C,IAAM,EAAE,GAAG,cAAU,CAAC,IAAI,CAAC,+BAAM,CAAC,CAAC;AACnC,IAAM,UAAU,GAAG,WAAW,CAAC;AAWlB,QAAA,SAAS,GAA0C,YAAI,CAChE,UAAC,EAOA;QANG,SAAS,eAAA,EACT,iBAAiB,EAAjB,SAAS,mBAAG,KAAK,KAAA,EACjB,kBAAkB,EAAlB,UAAU,mBAAG,KAAK,KAAA,EAClB,qBAAqB,EAArB,aAAa,mBAAG,KAAK,KAAA,EACrB,YAAU,EAAV,IAAI,mBAAG,GAAG,KAAA,EACV,aAAc,EAAd,KAAK,mBAAG,MAAM,KAAA;IAEd,IAAM,MAAM,GAAG,eAAO,CAAC;QACnB,OAAO;;YAAM,OAAA,CACT,8BAAC,2BAAa,IACV,SAAS,EAAE,EAAE,CACT,UAAU,YACR,GAAI,UAAU,eAAU,IAAM,IAAG,OAAO,CAAC,IAAI,CAAC,EAAE,GAAI,UAAU,gBAAW,KAAO,IAAG,OAAO,CAAC,KAAK,CAAC,OACnG,SAAS,CACZ,GACH,CACL;QARY,CAQZ,CAAC;IACN,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;IAE7B,IAAI,UAAU,EAAE;QACZ,OAAO,SAAS,CAAC,CAAC,CAAC,8BAAC,MAAM,OAAG,CAAC,CAAC,CAAC,6DAAK,CAAC;KACzC;IAED,OAAO,CACH,8BAAC,mBAAM,IAAC,QAAQ,EAAE,SAAS;QACvB,8BAAC,oBAAO,IAAC,UAAU,EAAE,UAAU,EAAE,aAAa,EAAE,aAAa;YACzD,8BAAC,MAAM,OAAG,CACJ,CACL,CACZ,CAAC;AACN,CAAC,CACJ,CAAC;AAEF,iBAAS,CAAC,WAAW,GAAG,WAAW,CAAC","names":[],"sources":["/Users/dmitry.avilov/a/my/ui-kit/src/components/Preloader/Preloader.tsx"],"sourcesContent":["import React, { FunctionComponent, memo, useMemo } from 'react';\nimport classnames from 'classnames/bind';\nimport { Overlay, Portal } from 'components';\nimport PreloaderIcon from './PreloaderIcon.svg';\nimport styles from './Preloader.module.scss';\n\nconst cn = classnames.bind(styles);\nconst CLASS_NAME = 'Preloader';\n\ntype PreloaderPropsType = {\n    className?: string;\n    isLoading?: boolean;\n    isAbsolute?: boolean;\n    isTransparent?: boolean;\n    size?: 'xs' | 's' | 'm' | 'l' | 'xl';\n    color?: 'dark' | 'white' | 'blue' | 'grey' | 'greyDark';\n};\n\nexport const Preloader: FunctionComponent<PreloaderPropsType> = memo(\n    ({\n        className,\n        isLoading = false,\n        isAbsolute = false,\n        isTransparent = false,\n        size = 'l',\n        color = 'blue',\n    }) => {\n        const Loader = useMemo(() => {\n            return () => (\n                <PreloaderIcon\n                    className={cn(\n                        CLASS_NAME,\n                        { [`${CLASS_NAME}--size-${size}`]: Boolean(size), [`${CLASS_NAME}--color-${color}`]: Boolean(color) },\n                        className\n                    )}\n                />\n            );\n        }, [size, color, className]);\n\n        if (isAbsolute) {\n            return isLoading ? <Loader /> : <></>;\n        }\n\n        return (\n            <Portal isOpened={isLoading}>\n                <Overlay isAbsolute={isAbsolute} isTransparent={isTransparent}>\n                    <Loader />\n                </Overlay>\n            </Portal>\n        );\n    }\n);\n\nPreloader.displayName = 'Preloader';\n"],"version":3}